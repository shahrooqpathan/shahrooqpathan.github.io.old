{"version":3,"sources":["Navbar/NavBar.js","Questions/Questions.js","Question/SubmitAnswer.js","Question/Question.js","NewQuestion/NewQuestion.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","react_default","a","createElement","className","Link","to","class","Questions","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","questions","refreshPage","axios","get","data","setState","map","question","key","id","concat","answers","length","title","description","Component","SubmitAnswer","answer","value","submitAnswer","questionId","_this2","react","for","type","onChange","e","updateAnswer","target","placeholder","onClick","submit","withRouter","Question","bind","assertThisInitialized","refreshQuestion","params","match","post","Question_SubmitAnswer","index","NewQuestion","disabled","htmlFor","onBlur","updateTitle","updateDescription","App","Navbar_NavBar","Route","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","BrowserRouter","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3095ca49.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nfunction NavBar() {\r\n  return (\r\n    <nav className=\"navbar navbar-dark bg-primary fixed-top\">\r\n      <Link className=\"navbar-brand\" to=\"/\">\r\n        Ask Monash : Community\r\n      </Link>\r\n      {/* <div class=\"collapse navbar-collapse\" id=\"navbarColor01\"> */}\r\n        <ul class=\"navbar-nav mr-auto\">\r\n          <li class=\"nav-item active\">\r\n            <Link className=\"navbar-link\" to=\"/\">\r\n              Home\r\n            </Link>\r\n          </li>\r\n        </ul>\r\n      {/* </div>   */}\r\n    \r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default NavBar;","import React, {Component} from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\nclass Questions extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      questions: null,\r\n      \r\n    };\r\n    \r\n  }\r\n\r\n  async componentDidMount() {\r\n    this.refreshPage();\r\n  }\r\n  \r\n  async refreshPage() {\r\n    const questions = (await axios.get('https://hidden-fortress-20734.herokuapp.com/')).data;\r\n    this.setState({\r\n      questions,\r\n    });\r\n\r\n    \r\n  }\r\n\r\n \r\n//   async componentDidUpdate(){\r\n//     this.refreshPage();\r\n//   }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n        \r\n          <Link to=\"/new-question\">\r\n            <div className=\"card text-white bg-secondary mb-3\">\r\n              <div className=\"card-header\">Need Help?</div>\r\n              <div className=\"card-body\">\r\n                <h4 className=\"card-title\">+Ask a question!</h4>\r\n                <p className=\"card-text\">No worries! Help will arrive</p>\r\n              </div>\r\n            </div>\r\n          </Link>\r\n          \r\n          {this.state.questions === null && <p>Loading questions...</p>}\r\n          {\r\n            this.state.questions && this.state.questions.map(question => (\r\n              <div key={question.id} className=\"col-sm-12 col-md-4 col-lg-3\">\r\n                <Link to={`/question/${question.id}`}>\r\n                  <div className=\"card text-white bg-success mb-3\">\r\n                    <div className=\"card-header\">Answers: {question.answers.length}</div>\r\n                    <div className=\"card-body\">\r\n                      <h5 className=\"card-title\"><strong>{question.title}</strong></h5>\r\n                      <p className=\"card-text\">{question.description}</p>\r\n                    </div>\r\n                  </div>\r\n                </Link>\r\n              </div>\r\n            ))\r\n          }\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Questions;","import React, {Component, Fragment} from 'react';\r\nimport {withRouter} from 'react-router-dom';\r\n\r\n\r\nclass SubmitAnswer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      answer: '',\r\n    };\r\n  }\r\n\r\n  updateAnswer(value) {\r\n    this.setState({\r\n      answer: value,\r\n    });\r\n  }\r\n\r\n  submit() {\r\n    this.props.submitAnswer(this.state.answer, this.props.questionId);\r\n\r\n    this.setState({\r\n      answer: '',\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        <div className=\"form-group\">\r\n          <label for=\"answerQuestion\">Answer:</label>\r\n          <textarea\r\n            id=\"answerQuestion\"\r\n            type=\"text\"\r\n            onChange={(e) => {this.updateAnswer(e.target.value)}}\r\n            className=\"form-control\"\r\n            placeholder=\"Share your suggestions or answer.\"\r\n            value={this.state.answer}\r\n          />\r\n        </div>\r\n        <button\r\n          className=\"btn btn-primary\"\r\n          onClick={() => {this.submit()}}>\r\n          Submit\r\n        </button>\r\n        <hr className=\"my-4\" />\r\n      </Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default withRouter(SubmitAnswer);","import React, {Component} from 'react';\r\nimport axios from 'axios';\r\nimport SubmitAnswer from './SubmitAnswer';\r\n\r\nclass Question extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            question: null,\r\n        };\r\n\r\n        this.submitAnswer = this.submitAnswer.bind(this)\r\n    }\r\n\r\n    \r\n  async componentDidMount() {\r\n     await this.refreshQuestion();  \r\n  }\r\n\r\n  async refreshQuestion() {\r\n    const { match: { params } } = this.props;\r\n    const question = (await axios.get(`https://hidden-fortress-20734.herokuapp.com/${params.questionId}`)).data;\r\n    this.setState({\r\n      question,\r\n    });\r\n  }\r\n  \r\n  async componentDidUpdate() {\r\n   \r\n  }\r\n  \r\n  async submitAnswer (answer, questionId) {\r\n      if(answer !== ''){\r\n        await axios.post(`https://hidden-fortress-20734.herokuapp.com/answer/${questionId}`,{answer});\r\n        await this.refreshQuestion();\r\n      }\r\n    \r\n  }\r\n\r\n  render() {\r\n    const {question} = this.state;\r\n    if (question === null)\r\n        return <p>Loading the question</p>\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n            <div className=\"jumbotron col-12\">\r\n                <h1 className=\"display-3\">{question.title}</h1>\r\n                <p className=\"lead\">{question.description}</p>\r\n                <hr className=\"my-4\" />\r\n                <SubmitAnswer questionId={question.id} submitAnswer={this.submitAnswer} />\r\n                <p class=\"lead\">Answers:</p>\r\n                {\r\n                    question.answers.map((answer, index) => (\r\n                        <div className=\"alert alert-secondary\">\r\n                            <p className=\"lead\" key={index}>{answer.answer}</p>\r\n                        </div>\r\n                        \r\n                    ))\r\n                }\r\n            </div>\r\n            </div>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Question;","import React, {Component} from 'react';\r\nimport {withRouter, Link} from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\nclass NewQuestion extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            disabled: false,\r\n            title: '',\r\n            description: '',\r\n        };\r\n        \r\n    }\r\n\r\n    updateTitle(value) {\r\n        this.setState({\r\n            title: value,\r\n        });\r\n    }\r\n\r\n    updateDescription(value) {\r\n        this.setState({\r\n          description: value,\r\n        });\r\n      }\r\n\r\n      async submit() {\r\n          \r\n          if(this.state.title !== ''){\r\n            this.setState({\r\n                disabled: true\r\n            })\r\n            await axios.post('https://hidden-fortress-20734.herokuapp.com/',{title: this.state.title, description: this.state.description});\r\n          }\r\n          \r\n          \r\n      }\r\n\r\n    render() {\r\n        return (\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n            <div className=\"col-12\">\r\n                <div className=\"card border-primary\">\r\n                <div className=\"card-header table-dark\"><strong>New Question</strong></div>\r\n                <div className=\"card-body text-left\">\r\n                    <div className=\"form-group\">\r\n                    <label htmlFor=\"exampleInputEmail1\">Title:</label>\r\n                    <input\r\n                        disabled={this.state.disabled}\r\n                        type=\"text\"\r\n                        onBlur={(e) => {this.updateTitle(e.target.value)}}\r\n                        className=\"form-control\"\r\n                        placeholder=\"What do you wanna ask?\"\r\n                    />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                    <label htmlFor=\"exampleInputEmail1\">Description:</label>\r\n                    <textarea\r\n                        disabled={this.state.disabled}\r\n                        type=\"text\"\r\n                        onBlur={(e) => {this.updateDescription(e.target.value)}}\r\n                        className=\"form-control\"\r\n                        placeholder=\"Be as detailed as possible.\"\r\n                    />\r\n                    \r\n                    </div>\r\n                    <button\r\n                        disabled={this.state.disabled}\r\n                        className=\"btn btn-primary\"\r\n                        onClick={() => {this.submit()}}>\r\n                        Submit\r\n                    </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            </div>\r\n        </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default withRouter(NewQuestion);\r\n","import React, { Component } from 'react';\nimport {Route} from 'react-router-dom';\nimport NavBar from './Navbar/NavBar'\nimport Questions from './Questions/Questions'\nimport Question from './Question/Question'\nimport NewQuestion from './NewQuestion/NewQuestion'\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <NavBar/>\n        <Route exact path='/new-question' component={NewQuestion}/>\n        <Route exact path='/' component={Questions}/>\n        <Route exact path='/question/:questionId' component={Question}/>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from 'react-router-dom';\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>\n    , document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}